---
title: Logstash文档
tags: 作者:汪帅
grammar_cjkRuby: true
grammar_mindmap: true
renderNumberedHeading: true
---

[toc!?direction=lr]


[Logstash的介绍](https://www.cnblogs.com/cjsblog/p/9459781.html)

Logstash管道有两个必需的元素，输入和输出，以及一个可选元素过滤器。输入插件从数据源那里消费数据，过滤器插件根据你的期望修改数据，输出插件将数据写入目的地。


![架构模型](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1546827759925.png)


# LogStash的安装

 1. [LogStash的下载地址](https://www.elastic.co/downloads/logstash)
 2. 安装JDK1.8
 3. 上传下载的安装包到/opt/logstash目录下，解压`tar -zxvf  logstash-6.5.4.tar.gz`
 4. 配置全局环境变量`vi /etc/profile`添加如下内容

``` shell?linenums
export JAVA_HOME=/usr/java/jdk1.8.0_152
export LOGSTASH_HOME=/opt/logstash/logstash-6.5.4
export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar
export PATH=$PATH:$JAVA_HOME/bin:$LOGSTASH_HOME/bin
```

 5. 查看是否安装成功：`logstash -V`
显示所安装的版本号：logstash 6.5.4
 6. 运行第一个程序测试：

``` bash
logstash -e'input {stdin {}} output {stdout {}}'
```
启动后再命令行输入Hello Word! 回车，在控制台会显示

``` shell?linenums
{
      "@version" => "1",
       "message" => "Hello Word! ",
          "host" => "master",
    "@timestamp" => 2019-01-07T05:23:53.238Z
}
```

 7. Ctrl+C可以停止！

# 常用插件

## File input plugin


通常，日志记录会在每行写入的末尾添加换行符。默认情况下，假定每个事件都是一行，并且一行被视为换行符之前的文本。如果您想将多个日志行连接到一个事件中，您将需要使用多行编解码器。插件在发现新文件和处理每个发现的文件之间循环。发现的文件具有生命周期，它们从“观察”或“忽略”状态开始。生命周期中的其他状态是：“主动”，“关闭”和“未观看”。

默认情况下，使用4095个文件的窗口来限制正在使用的文件句柄数。处理阶段有许多阶段：
- 检查自上次以来“关闭”或“忽略”文件的大小是否已更改，如果是，则将其置于“已观看”状态。
- 选择足够的“监视”文件来填充窗口中的可用空间，这些文件变为“活动”。
- 打开并读取活动文件，默认情况下，每个文件从最后的已知位置读取到当前内容（EOF）的末尾。

文件的读取策略：

 1. 在某些情况下，能够控制首先读取哪些文件，排序以及文件是完全读取还是带状/条带化是很有用的。
 2. 完全读取的是文件A，然后是文件B，然后是文件C，等等。
 3. 带状或带状读取是先读取文件A，然后读取文件B，然后读取文件C，如此循环，再读取文件A，直到读取所有文件

带状读取是通过更改file_chunk_count或者file_chunk_size指定的。如果您希望所有文件中的一些事件尽可能早地出现在Kibana中，那么绑定和排序可能非常有用。

### 该插件的两种模式Tail模式与Read模式

#### Tail模式

在这种模式下，插件的目标是跟踪更改的文件，并在添加到每个文件时发出新的内容。在这种模式下，文件被视为一个永不结束的内容流，EOF没有特殊的意义。插件总是假设会有更多的内容。当文件被旋转时，检测到较小或为零的大小，当前位置被重置为零并继续流。必须先看到分隔符，然后才能将累积的字符发出一行。

#### Read模式

在这种模式下，插件将每个文件视为内容完整，即有限的行流，现在EOF非常重要。不需要最后一个分隔符，因为EOF意味着可以将累积的字符作为一行发出。此外，这里的EOF意味着可以关闭文件并将其置于“未监视”状态——这将自动释放活动窗口中的空间。这种模式还可以处理内容完整的压缩文件。读取模式还允许在完全处理文件之后执行操作。

与Flume的区别：在过去尝试模拟读模式同时仍然假设无限流并不理想，专用读模式是一种改进。


### 对监视文件读取的当前位置上