---
title: 电商广告点击分析系统
tags: Flume,Kafka,SparkStreaming
grammar_cjkRuby: true
grammar_mindmap: true
renderNumberedHeading: true
---

# 核心需求

1、在线黑名单过滤
2、计算每个BatchDuration中每个User的广告点击量
3、判断用户点击是否属于黑名单点击
4、广告点击累计动态更新
5、对广告点击进行TopN
6、计算过去半个小时广告的点击趋势

# 架构选型
 假设我们的应用系统对应的用户的日活量在百万的基础上来实现此架构。


## Flume的简介
apache Flume 是一个从可以收集例如日志，事件等数据资源，并将这些数量庞大的数据从各项数据资源中集中起来存储的工具/服务，或者数集中机制。flume具有高可用，分布式，配置工具，其设计的原理也是基于将数据流，如日志数据从各种网站服务器上汇集起来存储到HDFS，HBase等集中存储器中。

![2.1 Flume复杂流结构模型](https://www.github.com/Tu-maimes/document/raw/master/小书匠/多路复杂.jpg)



### Flume的优势


1、Flume可以将应用产生的数据存储到任何集中存储器中，例如HDFS、HBase、Kafka等。
2、当收集数据的速度超过将写入数据的时候，也就是当收集信息遇到峰值时，这时候收集的信息非常大，甚至超过了系统的写入数据的能力，Flume会在数据生产者和数据收容器间做出调整，保证其能够在两者之间提供平稳的数据。
3、Flume的管道是基于事务，保证了数据在传送和接收时的一致性。
4、Flume是可靠的，容错性高，可升级，易管理，并且可定制。
5、支持各种接入资源数据的类型以及输出数据的类型。
6、支持多路径流量，多管道接入流量，多管道输出流量，上下文路由等。
7、可以被水平扩展。


### Flume性能测试

#### 测试环境

##### 硬件

- CPU：Intel(R) Core(TM) i7-6700 CPU @ 3.40GHz（8核）
- 内存：16G

##### 软件

- Flume：1.6.0
- Hadoop：2.6.0-cdh5.5.0
- Kfaka：2.11-0.9.0.1
- JDK：1.8.0_91-b14 64位

##### 测试文件

- 文件大小：107M ，共490010条记录

##### Flume配置

1、Source配置:
> agent.sources.source1.type = spooldir
> agent.sources.source1.spoolDir=/data/flume/dir

2、MemoryChannel配置
>agent.channels.memoryChannel.capacity = 1000000
agent.channels.memoryChannel.transactionCapacity = 1000000
agent.channels.memoryChannel.type=memory

3、FileChannel配置

> agent.channels.fileChannel.type = file
agent.channels.fileChannel.checkpointDir = /data/flume/checkpoint
agent.channels.fileChannel.dataDirs = /data/flume/data

4、JVM配置

>JAVA_OPTS="-Xms256m -Xmx256m -Xss256k -Xmn128m -XX:+UseParNewGC -XX:+UseConcMarkSweepGC -XX:-UseGCOverheadLimit"


#### 写入文件性能

|  FlumeConfig   |Time(s)     |  Throughput（events/s）   |
| --- | --- | --- |
|MemoryChannel+FileSink	|51|	9608|
|FileChannel+FileSink|	250	|1960|

#### 写入Kafka性能

|  FlumeConfig   |Time(s)     |  Throughput（events/s）   |
| --- | --- | --- |
|KafkaSink+MemoryChannel|	57	|8597|
|KafkaChannel	|50|	9800|
|KafkaSink+FileChannel|	830|	590|

#### 写入HDFS性能

|  FlumeConfig   |Time(s)     |  Throughput（events/s）   |
| --- | --- | --- |
|FileChannel+HdfsSink	|148|	3311|


## Kafka简介

Kafka 是一款开源的、轻量级的 、分布式、可分区和具有复制备份的 (Replicated)、基于ZooKeeper 协调管理的分布式流平台的功能强大的消息系统 。 
Kafka 定位就是一个分布式流处理平台。作为一个流式处理平台，必须满足以下三个关键特性：
- 能够允许发布和订阅流数据。
- 存储流数据时提供相应的容错机制。
- 当流数据到达时能被及时处理。

![Kafka消息系统最基本的体系架构](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561027584845.png)

- 消息生产者(Producer):将消息写入kafka集群。
- 消息消费者(Consumer):从kafka集群中拉取消息。

### Kafka的优势

 消息系统的特点：生存者消费者模型，先入先出（FIFO）

• 高性能：单节点支持上千个客户端，高吞吐量

1.     零拷贝技术

2.     分布式存储

3.     顺序读顺序写

4.     批量读批量写

• 持久性：消息直接持久化在普通磁盘上，且性能好

• 分布式：数据副本冗余、流量负载均衡、可扩展

• 很灵活：消息长时间持久化+Client维护消费状态

注意：消息系统基本的特点是保证了，有基本的生产者消费者模型，partition内部是FIFO 的，partition之间不是FIFO，当然我们可以把topic设为一个partition，这样就严格的FIFO

### Kafka性能测试

[参考文档](https://www.cnblogs.com/smartloli/p/10093838.html)

#### 测试环境

本次测试的环境信息由三台物理机组成，具体信息：

|主机名|Kafka版本|CPU|内存|磁盘|网卡|
| --- | --- | --- | --- | --- | --- |
|dn1|0.10.2.0|32核|64GB|12x4T|千兆|
|dn2|0.10.2.0|32核|64GB|12x4T|千兆|
|dn3|0.10.2.0|32核|64GB|12x4T|千兆|

#### 生产者测试

生产者测试，分别从线程数、分区数、副本数、Broker数、同步与异步模式、批处理大小、消息长度大小、数据压缩等。

##### 线程数
![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561030637347.png)

结论：向一个拥有6个分区、1个副本的Topic中，发送500万条消息记录时，随着线程数的增加，每秒发送的消息记录会逐渐增加。在线程数为25时，每秒发送的消息记录达到最佳值，随后再增加线程数，每秒发送的消息记录数反而会减少。

#### 分区数

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561031339014.png)

总结：从测试结果来看，分区数越多，单线程生产者的吞吐量越小。

#### 副本数

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561079067158.png)

总结：从测试结果来看，副本数越多，吞吐量越小。

#### Broker数量

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561079171982.png)

总结：从测试结果来看，增加Kafka Broker数量，吞吐量会增加。

#### 同步与异步模式

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561079326258.png)

总结：从测试结果来看，使用异步模式发送消息数据，比使用同步模式发送消息数据，吞吐量是同步模式的3倍左右。

#### 批处理大小

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561079604995.png)

总结：从测试的结果来看，发送的消息随着批处理大小增加而增加。当批处理大小增加到3000~5000时，吞吐量达到最佳状态，而后在增加批处理大小，吞吐量的性能会下降。

#### 消息长度的大小

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561080132100.png)

总结：从测试结果来看，随着消息长度的增加，每秒所能发送的消息逐渐减少（nMsg/sec）。但是，每秒发送的消息的总大小（MB/sec),会随着消息长度的增加而增加。

### Kafka消费者测试

消费者测试，可以从线程数、分区数、副本数等维度来进行测试。

#### 线程数

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561080799340.png)

总结：随着线程数的增加，每秒读取的消息记录会逐渐增加。在线程数与消费主题的分区相等时，吞吐量达到最佳值。随后，再增加线程数，新增的线程数将会处于空闲状态，对提升消费者程序的吞吐量没有帮助。

#### 分区数

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561081154469.png)

总结：当分区数增加时，如果线程数保持不变，则消费者程序的吞吐量性能会下降。

#### 副本数

![](https://www.github.com/Tu-maimes/document/raw/master/小书匠/1561081268274.png)

总结：副本数对消费者程序的吞吐量影响较小，消费者程序是从Topic的每个分区的Leader上读取数据的，而与副本数无关。 